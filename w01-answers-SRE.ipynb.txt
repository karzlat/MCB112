{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# answers 01: _the case of the dead sand mouse_\n",
    "\n",
    "__Sean's version__\n",
    "\n",
    "I'm going to read the data files across the network (from URLs) using `urllib`. That might save you from having to download the data files again, and it's useful to see how to do that in Python (without using even fancier modules like Pandas). You didn't have to do this in your answer though - we expected you to read local files from your directory, which is simpler.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import urllib.request  # For reading data files from URLs (without fancy Pandas)\n",
    "\n",
    "watsonfile   = \"http://mcb112.org/w01/Watson_SuppTable1\"\n",
    "moriartyfile = \"http://mcb112.org/w01/Moriarty_SuppTable2\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. check that the gene names match\n",
    "\n",
    "> *Output the names that appear in Watson_SuppTable1 but not Moriarty_SuppTable2, if any*\n",
    "\n",
    "One of many possible strategies: read each file line by line. Split each line into fields, on whitespace. Field 0 (the first one) is the name. Make a list of the names in each file. Convert the lists to sets, and Python allows you to subtract sets: \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9-Sep\n",
      "9-Mar\n",
      "2-Mar\n",
      "7-Mar\n",
      "8-Mar\n",
      "1-Dec\n",
      "15-Sep\n",
      "10-Mar\n",
      "2-Sep\n",
      "8-Sep\n",
      "4-Mar\n",
      "3-Mar\n",
      "11-Sep\n",
      "6-Sep\n",
      "5-Mar\n",
      "4-Sep\n",
      "14-Sep\n",
      "11-Mar\n",
      "1-Sep\n",
      "1-Mar\n",
      "3-Sep\n",
      "10-Sep\n",
      "7-Sep\n",
      "5-Sep\n",
      "12-Sep\n",
      "6-Mar\n"
     ]
    }
   ],
   "source": [
    "f1     = urllib.request.urlopen(watsonfile)  # open Watson_SuppTable1 over the web. (else, download and open it locally)\n",
    "names1 = []                                  # initialize an empty list\n",
    "for line in f1:\n",
    "    line   = line.decode('utf-8')    # A wrinkle in using urllib. <line> is raw byte string; we have to decode to text\n",
    "    if line[0] == '#': continue      # skip comment lines\n",
    "    line   = line.rstrip('\\n')       # remove the trailing newline\n",
    "    fields = line.split()            # split into fields on whitespace\n",
    "\n",
    "    names1.append(fields[0])         # Add fields[0], the gene name, to the list. 'append' is a method in the list object.\n",
    "f1.close()\n",
    "\n",
    "f2     = urllib.request.urlopen(moriartyfile) # Now the same, for Moriarty_SuppTable2 and a list 'names2[]'\n",
    "names2 = []\n",
    "for line in f2:\n",
    "    line   = line.decode('utf-8')\n",
    "    if line[0] == '#': continue      \n",
    "    line   = line.rstrip('\\n')       \n",
    "    fields = line.split()            \n",
    "\n",
    "    names2.append(fields[0])   \n",
    "f2.close()\n",
    "    \n",
    "# A fast pythonic way to get the different elements between two lists: set comparison.\n",
    "for gene in set(names1) - set(names2):\n",
    "    print(gene)\n",
    "    \n",
    "# Alternatively, the more obvious but slower way:\n",
    "#  for gene in names1:\n",
    "#     if gene not in names2: print(gene)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DEC1\n",
      "MARC1\n",
      "MARCH1\n",
      "SEPT1\n",
      "SEPT9\n",
      "SEPT5\n",
      "SEPT3\n",
      "MARCH8\n",
      "MARCH2\n",
      "SEPT10\n",
      "SEPT12\n",
      "MARCH9\n",
      "MARCH6\n",
      "MARC2\n",
      "MARCH5\n",
      "SEPT7\n",
      "MARCH7\n",
      "MARCH4\n",
      "MARCH10\n",
      "SEPT8\n",
      "SEPT14\n",
      "MARCH3\n",
      "MARCH11\n",
      "SEPT4\n",
      "SEPT6\n",
      "SEPT2\n",
      "SEPT11\n",
      "SEP15\n"
     ]
    }
   ],
   "source": [
    "# May as well do it the other way to see what's going on...\n",
    "for gene in set(names2) - set(names1):\n",
    "    print(gene)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> *if there's a difference - why?*\n",
    "\n",
    "What's happened is that Watson et al. imported their data into Microsoft Excel, and by default -- unless you click options that tell it not to -- Excel import will helpfully convert things that look like dates to a standard date format. So the gene \"MARCH8\" gets converted to \"8-Mar\". Excel also converts things that look like scientific-notation numbers to a standard number format, so a locus named \"2310009E13\" would get converted to \"2.31E+13\". The names in the Moriarty file are uncorrupted."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. explore the data\n",
    "\n",
    "> _output the five genes with the highest mRNA synthesis rate_\n",
    "\n",
    "We're going to use the same trick in all three subanswers here. We'll read the rate/tpm numbers into a __dict__, indexed by gene name. We can't sort a dict directly (dicts are unordered). What we need is to sort a separate list of the dict's keys into the order we want, then access the data in the dict in that sorted order. We have a couple of options. \n",
    "\n",
    "One way would be to provide a custom sorting function to python's `sort` function that sorts by rate or tpm or whatever using the data in the dict. \n",
    "\n",
    "Here we'll use a pythonic shortcut version of that: the `sorted` function can take a dict (among other things) as an argument and return a sorted list of its keys. If you give `sorted` a function as an optional `key` argument, it'll sort on that value instead. So giving it `<dict>.get` -- the dict's own method for retrieving its value -- is sufficient here! A tricksy and useful idiom. `reverse=True` tells `sorted` to sort in descending, rather than the default ascending order.\n",
    "\n",
    "The point of the exercise is to get used to lists (accessed by index, 0..n-1) and dicts (accessed by keyword), and how to sort them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OR6C65 91.2\n",
      "AKT2 82.9\n",
      "MBD5 81.7\n",
      "TMEM263 81.0\n",
      "C8orf82 69.8\n"
     ]
    }
   ],
   "source": [
    "f2          = urllib.request.urlopen(moriartyfile) # do it again...\n",
    "synth_rate  = {}     # initialize empty dicts\n",
    "halflife    = {}    \n",
    "for line in f2:\n",
    "    line   = line.decode('utf-8')\n",
    "    if line[0] == '#': continue      \n",
    "    line   = line.rstrip('\\n')       \n",
    "    fields = line.split()            \n",
    "\n",
    "    synth_rate[fields[0]] = float(fields[1])  # fields[0] is the gene name; our key. fields[1] is synth rate as a STRING.\n",
    "    halflife[fields[0]]   = float(fields[2])  #   ... we have to convert strings to numbers explicitly: hence float() \n",
    "    \n",
    "f2.close()\n",
    "\n",
    "\n",
    "sorted_byrate = sorted(synth_rate, key=synth_rate.get, reverse=True)    # Get a list of gene names (from synth_rate), sorting them on synth_rate's values \n",
    "for i in range(5):\n",
    "    gene = sorted_byrate[i]\n",
    "    print(\"{} {}\".format(gene, synth_rate[gene]))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> *output the five genes with the longest mRNA halflife*\n",
    "\n",
    "Same thing, with the halflife data from Moriarty."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "APOBR 78.1\n",
      "NMS 69.5\n",
      "VAT1 64.2\n",
      "SALL2 64.2\n",
      "UGT2B15 63.1\n"
     ]
    }
   ],
   "source": [
    "sorted_bylife = sorted(halflife, key=halflife.get, reverse=True)    \n",
    "for i in range(5):\n",
    "    gene = sorted_bylife[i]\n",
    "    print(\"{} {}\".format(gene, halflife[gene]))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> *output the five genes with the highest ratio of expression at t=96 hours post-mortem vs. t=0*\n",
    "\n",
    "Similar to the above, but now we pull in the Watson data, and make a dict of the t=96/t=0 ratio, indexed by gene name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "APOBR 32.82334384858044\n",
      "NMS 29.786585365853657\n",
      "UGT2B15 26.704123386842934\n",
      "TCP11L2 26.028936170212766\n",
      "LETM2 25.486850545221294\n"
     ]
    }
   ],
   "source": [
    "f2          = urllib.request.urlopen(watsonfile) \n",
    "ratio       = {}     \n",
    "for line in f2:\n",
    "    line   = line.decode('utf-8')\n",
    "    if line[0] == '#': continue      \n",
    "    line   = line.rstrip('\\n')       \n",
    "    fields = line.split()            # field [1] = 0hr. [5] = 96hr.\n",
    "\n",
    "    ratio[fields[0]] = float(fields[5]) / float(fields[1]) \n",
    "f2.close()\n",
    "\n",
    "\n",
    "sorted_byratio = sorted(ratio, key=ratio.get, reverse=True)    \n",
    "for i in range(5):\n",
    "    gene = sorted_byratio[i]\n",
    "    print(\"{} {}\".format(gene, ratio[gene]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The suspicious clue: the most differentially upregulated genes at t=96 are the mRNAs with the longest half lives (the slowest mRNA decay rate)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Figure out what happened\n",
    "\n",
    "> _write a script that merges the two data files, line by line, merging them on gene name_\n",
    "\n",
    "We've already got `synth_rate` and `halflife` data from Moriarty, so let's just read through the Watson file again to merge its lines with the Moriarty numbers.\n",
    "\n",
    "To write to a file, we open it for writing (`open(outfile, 'w')`), which gives us back a file handle. (Which we have to remember to close.) `print` takes a `file=<filehandle>` option so we can write to any open-for-writing filehandle.\n",
    "\n",
    "Sometimes you want to print individual fields for a growing line, one at a time, so you don't want `print` to add the automatic newline; the `end=''` argument changes the default end-of-print character from `/n` to nothing (empty string).\n",
    "\n",
    "Remember the gene name corruption issue. The question said we can ignore genes for which we don't have corresponding lines in both files.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "outfile = 'foo.tbl' \n",
    "outf    = open(outfile, 'w')\n",
    "\n",
    "# There's some name corruption that we're just going to avoid.  Create\n",
    "# a set of the gene names in the ratefile, that we can efficiently\n",
    "# check gene names in TPM file against.\n",
    "#\n",
    "good_genenames = set(synth_rate.keys())\n",
    "\n",
    "\n",
    "# Now read the TPM data file (again)\n",
    "# Convert its TPM fields to ratios relative to t=0, and append the\n",
    "# synthesis rate and halflife fields.\n",
    "#\n",
    "f2 = urllib.request.urlopen(watsonfile) \n",
    "for line in f2:\n",
    "    line   = line.decode('utf-8')\n",
    "    if line[0] == '#': continue     \n",
    "    line   = line.rstrip('\\n')      \n",
    "    fields = line.split()           \n",
    "    if fields[0] not in good_genenames: continue   # Just skip genes with corrupted names,\n",
    "                                                   # that we can't merge easily to rates.\n",
    "\n",
    "    tpm   = [float(s) for s in fields[1:]]               # tpm[] is now an array of floats\n",
    "    ratio = [tpm[i] / tpm[0] for i in range(len(tpm))]   # ratio[] are ratios rel to t=0\n",
    "    \n",
    "    print('{:15s} '.format(fields[0]), end='', file=outf)\n",
    "    for x in ratio[1:]: print('{:6.1f} '.format(x), end='', file=outf)\n",
    "\n",
    "    print('{:6.1f} '.format(synth_rate[fields[0]]), end='', file=outf) # append synth rate and halflife from Moriarty\n",
    "    print('{:6.1f} '.format(halflife[fields[0]]),   end='', file=outf)\n",
    "    print('', file=outf)\n",
    "outf.close()   \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you have a new file `foo.tbl` in your local directory. The easiest way to explore it is not in python but simply at the command line. \n",
    "\n",
    "The key exploration step is to see how \"upregulation\" systematically correlates with mRNA halflife.\n",
    "\n",
    "Turns out we can do shell commands in Jupyter Notebook, prefixing them with `!`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "APOBR              2.0    3.8    8.9   32.8    2.4   78.1 \r\n",
      "NMS                1.9    3.7    7.6   29.8    0.7   69.5 \r\n",
      "UGT2B15            2.0    3.2    7.8   26.7    4.8   63.1 \r\n",
      "TCP11L2            1.9    3.1    7.5   26.0    1.7   62.1 \r\n",
      "LETM2              1.9    3.4    7.1   25.5    2.8   56.8 \r\n",
      "SALL2              1.9    3.0    7.2   25.4    6.6   64.2 \r\n",
      "DDHD1              2.0    3.8    8.4   25.3    2.0   58.5 \r\n",
      "EME2               1.8    3.4    7.8   23.7    2.4   59.5 \r\n",
      "VAT1               1.7    3.3    6.5   23.2    8.5   64.2 \r\n",
      "HIGD1B             1.9    3.1    7.5   22.7    2.0   58.9 \r\n",
      "PRPH               2.0    2.9    6.6   22.0    1.4   56.7 \r\n",
      "BMP2K              1.9    3.2    7.7   20.2    1.7   52.9 \r\n",
      "FAM127C            1.6    2.6    6.0   19.3    2.3   55.7 \r\n",
      "NAV3               2.1    3.2    6.9   19.1   10.2   51.8 \r\n",
      "AP2M1              1.8    2.8    6.7   18.9    1.8   53.2 \r\n",
      "OGFOD1             2.0    3.1    6.2   18.4    1.3   51.1 \r\n",
      "MTMR10             1.7    2.6    5.9   17.7    4.6   49.9 \r\n",
      "CYB5R3             1.7    2.9    6.6   17.6    0.3   50.8 \r\n",
      "MTMR12             1.8    2.4    5.8   16.5    4.1   51.6 \r\n",
      "SRD5A3             2.0    2.8    6.0   15.8    0.8   45.5 \r\n",
      "sort: write failed: 'standard output': Broken pipe\r\n",
      "sort: write error\r\n"
     ]
    }
   ],
   "source": [
    "! sort -n -r -k5 foo.tbl | head -20"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(We can ignore the write error, if you get one: that's arising from some mishandled detail in Jupyter.)\n",
    "\n",
    "That's a list of the top 20 most highly upregulated genes at t=96, and now we can see really clearly that there's a strong correlation between the halflife (last column) and the t=96 expression ratio.\n",
    "\n",
    "### so what happened is...\n",
    "\n",
    "when Watson killed the sand mouse, new mRNA synthesis stopped, and the existing mRNAs decay away at their rates. The least stable mRNAs go away fastest; the most stable mRNAs go away slowest. RNA-seq measures the _relative_ abundance of each transcript, not the _absolute_ abundance, so it looks like the \"expression\" of the more stable mRNAs is going up, just because they're going away slower.\n",
    "\n",
    "Somewhat more subtle is the fact that the effect isn't necessarily monotonic. An mRNA with a moderate halflife will go up (as the least stable mRNAs disappear quickly from the population), then go down (as the moderate-halflife mRNA decays faster than more stable mRNAs).\n",
    "\n",
    "If Watson et al. had reported their yields from their RNA preps, this could've been a big clue: they should've noticed that the RNA yield was going down relatively quickly with time, because the mRNA population was decaying, which is not really what you'd expect to see if your interpretation is that the sandmouse is running some sort of post-death gene expression program."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [Root]",
   "language": "python",
   "name": "Python [Root]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
